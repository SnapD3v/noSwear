import telebot
from telebot import types
import database as db
import time
from process import *

API_TOKEN = input('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: ')

bot = telebot.TeleBot(API_TOKEN)


def processing_user_file(message):
    user_id = message.from_user.id
    try:
        user_file_extension = db.get_user_current_task(user_id, 'file_extension')
        if db.get_user_current_task(user_id, 'ban_list') == 'own':
            word_list = db.get_user_current_task(user_id, 'word_list')
        else:
            word_list = forbidden_words
        if db.get_user_current_task(user_id, 'format') == '–ê—É–¥–∏–æ':
            process_audio_file(input_audio_file_path=f'files/non_filtered/{user_id}{user_file_extension}',
                               output_audio_file_path=f'files/filtered/{user_id}.wav',
                               word_list=word_list)

            bot.send_audio(message.chat.id,
                           audio=open(f'files/filtered/{user_id}.wav', 'rb'),
                           caption='‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!')

            db.clear_user_current_files(user_id, 'filtered')
            db.clear_user_current_files(user_id, 'non_filtered')
            return

        elif db.get_user_current_task(user_id, 'format') == '–í–∏–¥–µ–æ':
            process_video_file(input_video_file_path=f'files/non_filtered/{user_id}{user_file_extension}',
                               output_video_file_path=f'files/filtered/{user_id}{user_file_extension}',
                               word_list=word_list)

            bot.send_video(message.chat.id,
                           open(f'files/filtered/{user_id}{user_file_extension}', 'rb'),
                           caption='‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!',
                           supports_streaming=True)

            db.clear_user_current_files(user_id, 'filtered')
            db.clear_user_current_files(user_id, 'non_filtered')
            return

    except Exception as e:
        db.ExceptionHandler(e)
        bot.reply_to(message, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –û–Ω–∞ —É–∂–µ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')
        return


# –î–∏–Ω–∞–º–∏—á–Ω–æ–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (Inline-keyboard)
def build_menu(buttons, n_cols,
               header_buttons=None,
               footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, [header_buttons])
    if footer_buttons:
        menu.append([footer_buttons])
    return menu


# –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ü–µ–Ω–∑—É—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç—ã
available_effects = [
    '–¢–∏—à–∏–Ω–∞'
]


# –î–∏–Ω–∞–º–∏—á–Ω–æ–µ —Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ü–µ–Ω–∑—É—Ä—ã (Reply-keyboard)
def kb_available_effects():
    kb = []
    for effect in available_effects:
        kb.append(types.KeyboardButton(f'{effect}'))
    kb_markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True).add(*kb)
    return kb_markup


@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        user_id = message.from_user.id
        if db.check_user_id_in_db(user_id):
            db.edit_user_data(user_id, 'current_task', {})
            db.clear_user_current_files(user_id, 'filtered')
            db.clear_user_current_files(user_id, 'non_filtered')
        else:
            db.create_user_data(user_id)

        kb = [types.KeyboardButton('–í–∏–¥–µ–æ'),
              types.KeyboardButton('–ê—É–¥–∏–æ')]
        kb_markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True).add(*kb)

        bot.reply_to(message,
                     'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ‚ÄúNo Swear‚Äù, –∏ —è –ø–æ–º–æ–≥—É –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã. '
                     '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å:',
                     reply_markup=kb_markup)
        bot.register_next_step_handler(message, file_format)
    except Exception as e:
        db.ExceptionHandler(e)
        bot.reply_to(message,
                     '–û–π! –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')


@bot.message_handler(commands=['reset'])
def reset_step_handlers(message):
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id

        bot.clear_step_handler_by_chat_id(chat_id)
        db.edit_user_data(user_id, 'current_task', {})
        db.clear_user_current_files(user_id, 'filtered')
        db.clear_user_current_files(user_id, 'non_filtered')

        if message.text == '/reset':
            bot.reply_to(message,
                         '–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞, –≤—Å–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.')

    except Exception as e:
        db.ExceptionHandler(e)
        bot.reply_to(message,
                     '–û–π! –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')


def incorrect_message_step_handler(message, next_step_handler=None, *args):
    if message.text == '/start' or message.text == '/reset':
        reset_step_handlers(message)
        if message.text == '/start':
            send_welcome(message)
    else:
        bot.send_message(message.chat.id,
                         '–í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –≤–∞—à –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –±–æ—Ç–µ.')
        bot.register_next_step_handler(message, next_step_handler, *args)


def download_user_file(message, format):
    try:
        user_id = message.from_user.id
        path = f'files/non_filtered/{user_id}'
        if format == '–ê—É–¥–∏–æ':
            audio_file_id = message.audio.file_id

            file_extension = '.' + message.audio.file_name.split('.')[-1]
            db.edit_user_current_task(user_id, 'file_extension', file_extension)
            path += file_extension

            bot.reply_to(message,
                         '–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ñ–∞–π–ª! –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Å–∫–∞—á–∞—Ç—å...')

            audio_file_info = bot.get_file(audio_file_id)
            downloaded_audio_file = bot.download_file(audio_file_info.file_path)
            with open(path, 'wb') as new_audio_file:
                new_audio_file.write(downloaded_audio_file)

            db.edit_user_current_task(user_id, 'file_path', 'files/non_filtered/')
            return True

        elif format == '–í–∏–¥–µ–æ':
            video_file_id = message.video.file_id

            file_extension = '.' + message.video.file_name.split('.')[-1]
            db.edit_user_current_task(user_id, 'file_extension', file_extension)
            path += file_extension

            bot.reply_to(message,
                         '–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ñ–∞–π–ª! –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Å–∫–∞—á–∞—Ç—å...')

            video_file_info = bot.get_file(video_file_id)
            downloaded_video_file = bot.download_file(video_file_info.file_path)
            with open(path, 'wb') as new_doc_file:
                new_doc_file.write(downloaded_video_file)

            db.edit_user_current_task(user_id, 'file_path', 'files/non_filtered/')
            return True

        elif format == '–î–æ–∫_–í–∏–¥–µ–æ':
            doc_file_id = message.document.file_id

            file_extension = '.' + message.document.file_name.split('.')[-1]
            db.edit_user_current_task(user_id, 'file_extension', file_extension)
            path += file_extension

            bot.reply_to(message,
                         '–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ñ–∞–π–ª! –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Å–∫–∞—á–∞—Ç—å...')
            doc_file_info = bot.get_file(doc_file_id)
            downloaded_doc_file = bot.download_file(doc_file_info.file_path)
            with open(path, 'wb') as new_doc_file:
                new_doc_file.write(downloaded_doc_file)

            db.edit_user_current_task(user_id, 'file_path', 'files/non_filtered')
            return True

        elif format == '–î–æ–∫_–ê—É–¥–∏–æ':
            doc_file_id = message.document.file_id

            file_extension = '.' + message.document.file_name.split('.')[-1]
            db.edit_user_current_task(user_id, 'file_extension', file_extension)
            path += file_extension

            bot.reply_to(message,
                         '–ü–æ–ª—É—á–∏–ª —Ç–≤–æ–π —Ñ–∞–π–ª! –°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Å–∫–∞—á–∞—Ç—å...')
            doc_file_info = bot.get_file(doc_file_id)
            downloaded_doc_file = bot.download_file(doc_file_info.file_path)
            with open(path, 'wb') as new_doc_file:
                new_doc_file.write(downloaded_doc_file)

            db.edit_user_current_task(user_id, 'file_path', 'files/non_filtered')
            return True
    except Exception as e:
        db.ExceptionHandler(e)
        bot.reply_to(message,
                     '–û–π! –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')
        return False


# –ù–∏–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ü–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def file_format(message):
    try:
        user_id = message.from_user.id

        if message.text == '–í–∏–¥–µ–æ' or message.text == '–ê—É–¥–∏–æ':
            db.edit_user_current_task(user_id, 'format', message.text)

            kb = [types.KeyboardButton('–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É (—Ä—É—Å—Å–∫–∏–π)'),
                  types.KeyboardButton('–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤')]
            kb_markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True).add(*kb)

            bot.reply_to(message,
                         '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å. \n\n'
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: \n'
                         '1. –ó–∞–º–µ–Ω–∏—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É (—Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ) \n'
                         '2. –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤',
                         reply_markup=kb_markup)
            bot.register_next_step_handler(message, words_to_change)
        else:
            incorrect_message_step_handler(message, file_format)
    except Exception as e:
        db.ExceptionHandler(e)
        bot.reply_to(message,
                     '–û–π! –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')


def words_to_change(message):
    try:
        user_id = message.from_user.id

        if message.text == '–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É (—Ä—É—Å—Å–∫–∏–π)':
            db.edit_user_current_task(user_id, 'ban_list', 'default')

            kb_markup = kb_available_effects()

            bot.reply_to(message,
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —á—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞:',
                         reply_markup=kb_markup)
            bot.register_next_step_handler(message, change_effect)

        elif message.text == '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤':
            db.edit_user_current_task(user_id, 'ban_list', 'own')

            bot.reply_to(message,
                         '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å.')
            bot.register_next_step_handler(message, set_own_word_list)

        else:
            incorrect_message_step_handler(message, words_to_change)
    except Exception as e:
        db.ExceptionHandler(e)
        bot.reply_to(message,
                     '–û–π! –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')


def set_own_word_list(message):
    try:
        if message.text == '/start' or message.text == '/reset':
            incorrect_message_step_handler(message)
        else:
            word_list = [word.replace(',', '') for word in message.text.split(' ')]

            kb = [types.KeyboardButton('–î–∞'),
                  types.KeyboardButton('–ù–µ—Ç')]
            kb_markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True).add(*kb)

            bot.reply_to(message,
                         f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã: \n{" | ".join(word_list)} \n–í–µ—Ä–Ω–æ?',
                         reply_markup=kb_markup)
            bot.register_next_step_handler(message, confirm_set_own_word_list, word_list)
    except Exception as e:
        db.ExceptionHandler(e)
        bot.reply_to(message,
                     '–û–π! –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')


def confirm_set_own_word_list(message, word_list):
    try:
        user_id = message.from_user.id

        if message.text == '–î–∞':
            db.edit_user_current_task(user_id, 'word_list', word_list)
            kb_markup = kb_available_effects()

            bot.reply_to(message,
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —á—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞:',
                         reply_markup=kb_markup)
            bot.register_next_step_handler(message, change_effect)

        elif message.text == '–ù–µ—Ç':
            db.edit_user_current_task(user_id, 'word_list', '')

            bot.reply_to(message,
                         '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å.')
            bot.register_next_step_handler(message, set_own_word_list)
        else:
            incorrect_message_step_handler(message, confirm_set_own_word_list, word_list)
    except Exception as e:
        db.ExceptionHandler(e)
        bot.reply_to(message,
                     '–û–π! –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')


def change_effect(message):
    try:
        user_id = message.from_user.id
        if message.text in available_effects:
            db.edit_user_current_task(user_id, 'effect', message.text)

            message_text = f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à ' \
                           f'{db.get_user_current_task(user_id, "format")} —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. \n' \
                           '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏. \n\n' \
                           '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: \n'
            if db.get_user_current_task(user_id, "format") == "–ê—É–¥–∏–æ":
                message_text += '–§–æ—Ä–º–∞—Ç: .mp3 / .wav\n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —è –Ω–∞—á–Ω—É –æ–±—Ä–∞–±–æ—Ç–∫—É!'
            else:
                message_text += '–§–æ—Ä–º–∞—Ç: .mp4 / .avi\n–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —è –Ω–∞—á–Ω—É –æ–±—Ä–∞–±–æ—Ç–∫—É!'

            bot.reply_to(message, message_text)
            bot.register_next_step_handler(message, user_upload_file)
        else:
            incorrect_message_step_handler(message, change_effect)

    except Exception as e:
        db.ExceptionHandler(e)
        bot.reply_to(message,
                     '–û–π! –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')


def user_upload_file(message):
    user_id = message.from_user.id
    flag = False

    try:
        if message.text == '/start' or message.text == '/reset':
            incorrect_message_step_handler(message)
            return
        if db.get_user_current_task(user_id, 'format') == '–ê—É–¥–∏–æ' and message.content_type == 'audio':
            flag = download_user_file(message, '–ê—É–¥–∏–æ')
        elif db.get_user_current_task(user_id, 'format') == '–í–∏–¥–µ–æ' and message.content_type == 'video':
            flag = download_user_file(message, '–í–∏–¥–µ–æ')
        elif message.content_type == 'document':
            file_extension = message.document.file_name.split('.')[-1]
            if db.get_user_current_task(user_id, 'format') == '–í–∏–¥–µ–æ' and \
                    (file_extension == 'mp4' or file_extension == 'avi'):
                flag = download_user_file(message, '–î–æ–∫_–í–∏–¥–µ–æ')
            elif db.get_user_current_task(user_id, 'format') == '–ê—É–¥–∏–æ' and \
                    (file_extension == 'mp3' or file_extension == 'wav'):
                flag = download_user_file(message, '–î–æ–∫_–ê—É–¥–∏–æ')
        else:
            bot.reply_to(message,
                         '–§–æ—Ä–º–∞—Ç –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.')
            bot.register_next_step_handler(message, user_upload_file)
            return

        if flag:
            bot.reply_to(message,
                         '‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –Ø –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É. \n'
                         '‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞. \n'
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ö–æ–≥–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –æ—á–∏—â–µ–Ω–Ω—É—é '
                         '–≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞.')
            processing_user_file(message)
    except Exception as e:
        db.ExceptionHandler(e)
        bot.reply_to(message,
                     '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –û–Ω–∞ —É–∂–µ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.')


print('Bot is running.')

bot.enable_save_next_step_handlers(delay=1)

bot.load_next_step_handlers()


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            db.ExceptionHandler(e)
            time.sleep(5)
            continue

        # finally:
        #     for user_id in db.open_db():
        #         db.edit_user_data(user_id, 'current_task', {})
        #         db.clear_user_current_files(user_id, 'filtered')
        #         db.clear_user_current_files(user_id, 'non_filtered')
        #     print(f'[{db.time_now()}] –í—Å–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
